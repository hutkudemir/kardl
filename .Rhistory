detected <-  c(detected,  trimws(unlist(strsplit(theLast, "[\\+\\-]", perl = TRUE))))
}
}
}
}
}else{
detected<-matchPattern<-theRest<-""
#   warning("The formula is not well constructed!",call. = F)
}
listDetect<-detected
if(length(detected)>1){
listDetect<-unique(detected[detected !=""])
}
list(detected = listDetect,  theRest =theRest,   matchPattern=matchPattern)
}
YparseFormula(CPI~. , matchPattern = ".",ignore.case=T)
YparseFormula(CPI~.+asym(ER)+deterministic(covid)+trend , matchPattern = ".",ignore.case=T)
YparseFormula(CPI~asym(ER)+deterministic(covid)+.+trend , matchPattern = ".",ignore.case=T)
YparseFormula(CPI~asym(ER)+kkk+deterministic(covid)+.+trend , matchPattern = ".",ignore.case=T)
YparseFormula(CPI~asym(ER)+kkk+deterministic(covid)+trend+. , matchPattern = ".",ignore.case=T)
YparseFormula(CPI~.+asym(ER)+kkk+deterministic(covid)+trend+. , matchPattern = ".",ignore.case=T)
YparseFormula(CPI~.+asym(ER)+kkk+deterministic(covid)+trend , matchPattern = ".",ignore.case=T)
MyFormula<-CPI~ER+PPI+asym(ER)+deterministic(covid)+trend
kardl(imf_example_data,MyFormula,mode = "grid")
MyFormula<-CPI~ER+PPI+asym(ER)+deterministic(covid)+trend
kardl(imf_example_data,MyFormula,mode = "grid")
kardl(imf_example_data,MyFormula,mode = "grid")
YparseFormula(CPI~.+asym(ER)+kkk+deterministic(covid)+trend , matchPattern = "asym",ignore.case=T)
YparseFormula<- function(formula_, matchPattern = "asym",ignore.case=FALSE) {
if(typeof(formula_)=="language"){
indVars <- formula_[3]
depVar<-formula_[2]
txt <- as.character(indVars)
detected<-theRest<-c()
for (varType in matchPattern) {
if(varType == "." && "." %in% all.vars(formula_)){
detected<-c(detected,".")
foundPart1<- sub("^\\s*\\+*","", sub("\\+*\\s*\\.","",indVars))
if(trimws(foundPart1) == ""){
theRest <- ""}
else{
theRest <- as.formula(paste0(depVar,"~",foundPart1))
}
}else{
thisPatterns<- sub("\\s+$", "",sub("^\\s+", "", sub("[\\[(].*$", "", varType))) # remove ( or [ in addition to trim left and right of the varType
# patterns<-c(patterns,thisPatterns)
pattern <- paste0("\\s*[\\+\\-]*\\s*",thisPatterns,"(?![\\w\\d])([\\[(](.+?)[\\])])?")
m <- gregexpr(pattern, txt,ignore.case ,perl = TRUE)
foundPart <- regmatches(txt, m)
if(is.na(foundPart[[1]][1])){
detected<-c(detected,"")
theRest <- formula_
}else{
theOthers <- regmatches(txt, m, invert = TRUE)[[1]]
theRest <- paste(theOthers[theOthers != ""], collapse = '')
if(theRest!=""){
txt<-theRest
theRest<- formula_<-as.formula( paste0(depVar ,"~",theRest))
}else{
theRest=""
}
m1 <- gregexpr("[\\[(].+?[\\])]", foundPart[[1]],ignore.case ,perl = TRUE)
foundPart1 <- regmatches(foundPart[[1]], m1)
if(is.na(foundPart1[[1]][1])){
detected <-  c(detected,thisPatterns)
}else{
theLast <- substr(foundPart1, 2, nchar(foundPart1) - 1)
detected <-  c(detected,  trimws(unlist(strsplit(theLast, "[\\+\\-]", perl = TRUE))))
}
}
}
}
}else{
detected<-matchPattern<-theRest<-""
#   warning("The formula is not well constructed!",call. = F)
}
listDetect<-detected
if(length(detected)>1){
listDetect<-unique(detected[detected !=""])
}
list(detected = listDetect,  theRest =theRest,   matchPattern=matchPattern)
}
YparseFormula(CPI~.+asym(ER)+kkk+deterministic(covid)+trend , matchPattern = "asym",ignore.case=T)
YparseFormula(CPI~.+asym(ER)+kkk+deterministic(covid)+trend , matchPattern = ".",ignore.case=T)
View(mminp)
mminp[["data"]]
colnames(mminp$data)
YparseFormula(CPI~.+asym(ER)+kkk+deterministic(covid)+trend , matchPattern = ".",ignore.case=T)
w<-YparseFormula(CPI~.+asym(ER)+kkk+deterministic(covid)+trend , matchPattern = ".",ignore.case=T)
w$detected =="."
kardl(imf_example_data,MyFormula,mode = "grid")
kardl_model_grid<-
kardl(imf_example_data,CPI~ER+PPI+asym(ER)+deterministic(covid)+trend,mode = "grid")
kardl_model_grid
kardl(imf_example_data,CPI~.+asym(ER)+deterministic(covid)+trend,mode = "grid")
kardl(imf_example_data,CPI~.+asym(ER)+deterministic(covid)+trend,mode = "grid")
View(mmm)
mmm[["Allvars"]]
kardl(imf_example_data,CPI~.+asym(ER)+deterministic(covid)+trend,mode = "grid")
View(mmm)
kardl(imf_example_data,CPI~.+asym(ER)+deterministic(covid)+trend,mode = "grid")
View(ninput)
ninput$Allvars[1]
kardl(imf_example_data,CPI~.+asym(ER)+deterministic(covid)+trend,mode = "grid")
kardl(imf_example_data,CPI~.+asym(ER)+deterministic(covid)+trend,mode = "grid")
ninput$Allvars
ninput$Allvars[c("ER")]
ninput$Allvars[-c("ER")]
ninput$Allvars[ninput$Allvars != "ER"  ]
ninput$Allvars[ninput$Allvars %in% "ER"  ]
ninput$Allvars[! ninput$Allvars %in% "ER"  ]
ninput$Allvars[! ninput$Allvars %in% "ERd"  ]
ninput$Allvars[! ninput$Allvars %in% c()  ]
ninput$Allvars[! ninput$Allvars %in% c()  ]
kardl(imf_example_data,CPI~.+asym(ER)+deterministic(covid)+trend,mode = "grid")
kardl(imf_example_data,CPI~.+trend,mode = "grid")
kardl(imf_example_data,CPI~.+deterministic(covid),mode = "grid")
kardl(imf_example_data,CPI~deterministic(covid)+.,mode = "grid")
kardl(imf_example_data,CPI~aysm(ER)+deterministic(covid)+.,mode = "grid")
kardl(imf_example_data,CPI~.+deterministic(covid),mode = "grid")
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::check()
# Sample article: THE DYNAMICS OF EXCHANGE RATE PASS-THROUGH TO DOMESTIC PRICES IN TURKEY
library(magrittr)
library(kardl)
MyFormula<-CPI~ER+PPI+asym(ER)+deterministic(covid)+trend
kardl_model_grid<-kardl(imf_example_data,MyFormula,mode = "grid")
kardl_model_grid<-kardl(imf_example_data,MyFormula,mode = "grid")
kardl_model_grid<-kardl(imf_example_data,MyFormula,mode = "grid")
myrest
kardl_model_grid<-kardl(imf_example_data,MyFormula,mode = "grid")
kardl_model_grid<-kardl(imf_example_data,MyFormula,mode = "grid")
mdd
mdd$detected=="."
if(mdd$detected==".")print(2)
if(mdd$detected==".")print(2)
is.null( mdd$detected)
kardl_model_grid<-kardl(imf_example_data,MyFormula,mode = "grid")
kardl_model_grid<-kardl(imf_example_data,MyFormula,mode = "grid")
kardl_model_grid<-kardl(imf_example_data,MyFormula,mode = "grid")
kardl_model_grid<-kardl(imf_example_data,MyFormula,mode = "grid")
deterministic_<-c()
if(!is.null(mdd$detected) && mdd$detected=="."){
completeVars<-colnames(inputs$data)
completeVars<-completeVars[ ! completeVars %in% deterministic_]
}else{
completeVars<-c()
}
Allvars_<-unique(c(  trimws(c(all.vars(mdd$theRest))),completeVars  ));
Allvars_
mdd$theRest
kardl_model_grid<-kardl(imf_example_data,MyFormula,mode = "grid")
MyFormula<-CPI~ER+PPI+asym(ER)+deterministic(covid)+trend
kardl_model_grid<-kardl(imf_example_data,MyFormula,mode = "grid")
kardl_model_grid
kardl_model<- imf_example_data %>% kardl(MyFormula,mode = "grid_custom")
kardl_model
kardl_model2<-kardl(imf_example_data,MyFormula,mode = c( 2    ,  1    ,  1   ,   3 ))
# Getting the results
kardl_model2
# Getting the summary of the results
summary(kardl_model)
# OR
imf_example_data %>% kardl(MyFormula) %>% summary()
kardl(imf_example_data,CPI~.+deterministic(covid),mode = "grid")
# For increasing the performance of finding the most fitted lag vector
kardl(imf_example_data,MyFormula, mode = "grid_custom")
# Setting max lag instead of default value [4]
kardl(imf_example_data,MyFormula,maxlag = 6, mode = "grid_custom")
kardl_set(criterion = "HQ") # setting the criterion to HQ
kardl(imf_example_data, MyFormula, maxlag = 6, mode = "grid_custom")
# using default values of lags
kardl(imf_example_data, MyFormula, mode=c(1,2,3,0))
kardl_set(DifferentAsymLag = FALSE) # setting the same lags for positive and negative decompositions
diffAsymLags<-kardl(imf_example_data, MyFormula, mode = "grid_custom")
diffAsymLags$properLag
kardl_set(DifferentAsymLag = TRUE) # setting the different lags for positive and negative decompositions
sameAsymLags<-kardl(imf_example_data, MyFormula, mode = "grid_custom" )
sameAsymLags$properLag
# Setting the preffixes and suffixes for non-linear variables
kardl_set(AsymPrefix = c("asyP_","asyN_"), AsymSuffix = c("_PP","_NN"))
kardl(imf_example_data, MyFormula,  mode = "grid_custom")
# For having the lags plot
library(ggplot2)
library(dplyr)
#  kardl_model_grid[["LagCriteria"]] is a matrix, convert it to a data frame
LagCriteria <- as.data.frame(kardl_model_grid[["LagCriteria"]])
# Rename columns for easier access and convert relevant columns to numeric
colnames(LagCriteria) <- c("lag", "AIC", "BIC", "AICc", "HQ")
LagCriteria <- LagCriteria %>%  mutate(across(c(AIC, BIC, HQ), as.numeric))  # Only keep AIC, BIC, HQ as numeric
# Pivot the data to a long format excluding AICc
library(tidyr)
LagCriteria_long <- LagCriteria %>%  select(-AICc) %>%   pivot_longer(cols = c(AIC, BIC, HQ), names_to = "Criteria", values_to = "Value")
# Find the minimum value for each criterion
min_values <- LagCriteria_long %>%  group_by(Criteria) %>%  slice_min(order_by = Value) %>%  ungroup()
# Create the ggplot with lines, highlight minimum values, and add labels
ggplot(LagCriteria_long, aes(x = lag, y = Value, color = Criteria, group = Criteria)) +  geom_line() +
geom_point(data = min_values, aes(x = lag, y = Value), color = "red", size = 3, shape = 8) +
geom_text(data = min_values, aes(x = lag, y = Value, label = lag),
vjust = 1.5, color = "black", size = 3.5) +  # Adjusted vjust to place labels below
labs(title = "Lag Criteria Comparison with Minimum Values Highlighted", x = "Lag Configuration",  y = "Criteria Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
devtools::document()
devtools::check()
devtools::check()
devtools::check()
kardl_set(criterion = "BIC", DifferentAsymLag = TRUE)
# Reset to default values
kardl_get()  # Check current settings
kardl_reset()
kardl_get()  # Check settings after reset
library(magrittr)
imf_example_data %>%
kardl_set(LongCoef= "K1{lag}w1{varName}",DifferentAsymLag= FALSE ) %>%  kardl(MyFormula ) %>%
kardl_reset()
kardl_get()
imf_example_data %>%
kardl_reset() %>%
kardl_set(LongCoef= "K2{lag}w2{varName}",DifferentAsymLag=FALSE ) %>%  kardl(MyFormula)
imf_example_data %>%
kardl_set(LongCoef= "K1{lag}w1{varName}",DifferentAsymLag= FALSE ) %>%  kardl(MyFormula ) %>%
kardl_reset()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(magrittr)
MyFormula<-CPI~ER+PPI+asym(ER)+deterministic(covid)+trend
recmt_model_grid<-recmt(imf_example_data,MyFormula,mode = "grid")
MyFormula<-CPI~ER+PPI+asym(ER)+deterministic(covid)+trend
roxygen2::roxygenise()
roxygen2::roxygenise()
MyFormula<-CPI~ER+PPI+asym(ER)+deterministic(covid)+trend
MyFormula<-CPI~ER+PPI+asym(ER)+deterministic(covid)+trend
# Sample article: THE DYNAMICS OF EXCHANGE RATE PASS-THROUGH TO DOMESTIC PRICES IN TURKEY
library(magrittr)
library(kardl)
MyFormula<-CPI~ER+PPI+asym(ER)+deterministic(covid)+trend
kardl_model_grid<-kardl(imf_example_data,MyFormula,mode = "grid")
kardl_model_grid
kardl_model<- imf_example_data %>% kardl(MyFormula,mode = "grid_custom")
kardl_model
devtools::document()
devtools::check()
# Sample article: THE DYNAMICS OF EXCHANGE RATE PASS-THROUGH TO DOMESTIC PRICES IN TURKEY
library(magrittr)
library(kardl)
MyFormula<-CPI~ER+PPI+asym(ER)+deterministic(covid)+trend
kardl_model_grid<-kardl(imf_example_data,MyFormula,mode = "grid")
kardl_model_grid
kardl_model<- imf_example_data %>% kardl(MyFormula,mode = "grid_custom")
kardl_model
kardl_model2<-kardl(imf_example_data,MyFormula,mode = c( 2    ,  1    ,  1   ,   3 ))
# Getting the results
kardl_model2
# Getting the summary of the results
summary(kardl_model)
# OR
imf_example_data %>% kardl(MyFormula) %>% summary()
kardl(imf_example_data,CPI~.+deterministic(covid),mode = "grid")
# For increasing the performance of finding the most fitted lag vector
kardl(imf_example_data,MyFormula, mode = "grid_custom")
# Setting max lag instead of default value [4]
kardl(imf_example_data,MyFormula,maxlag = 6, mode = "grid_custom")
kardl_set(criterion = "HQ") # setting the criterion to HQ
kardl(imf_example_data, MyFormula, maxlag = 6, mode = "grid_custom")
# using default values of lags
kardl(imf_example_data, MyFormula, mode=c(1,2,3,0))
kardl_set(DifferentAsymLag = FALSE) # setting the same lags for positive and negative decompositions
diffAsymLags<-kardl(imf_example_data, MyFormula, mode = "grid_custom")
diffAsymLags$properLag
kardl_set(DifferentAsymLag = TRUE) # setting the different lags for positive and negative decompositions
sameAsymLags<-kardl(imf_example_data, MyFormula, mode = "grid_custom" )
sameAsymLags$properLag
# Setting the preffixes and suffixes for non-linear variables
kardl_set(AsymPrefix = c("asyP_","asyN_"), AsymSuffix = c("_PP","_NN"))
kardl(imf_example_data, MyFormula,  mode = "grid_custom")
# For having the lags plot
library(ggplot2)
#  kardl_model_grid[["LagCriteria"]] is a matrix, convert it to a data frame
LagCriteria <- as.data.frame(kardl_model_grid[["LagCriteria"]])
# Rename columns for easier access and convert relevant columns to numeric
colnames(LagCriteria) <- c("lag", "AIC", "BIC", "AICc", "HQ")
LagCriteria <- LagCriteria %>%  mutate(across(c(AIC, BIC, HQ), as.numeric))  # Only keep AIC, BIC, HQ as numeric
library(dplyr)
#  kardl_model_grid[["LagCriteria"]] is a matrix, convert it to a data frame
LagCriteria <- as.data.frame(kardl_model_grid[["LagCriteria"]])
# Rename columns for easier access and convert relevant columns to numeric
colnames(LagCriteria) <- c("lag", "AIC", "BIC", "AICc", "HQ")
LagCriteria <- LagCriteria %>%  mutate(across(c(AIC, BIC, HQ), as.numeric))  # Only keep AIC, BIC, HQ as numeric
# Pivot the data to a long format excluding AICc
library(tidyr)
LagCriteria_long <- LagCriteria %>%  select(-AICc) %>%   pivot_longer(cols = c(AIC, BIC, HQ), names_to = "Criteria", values_to = "Value")
# Find the minimum value for each criterion
min_values <- LagCriteria_long %>%  group_by(Criteria) %>%  slice_min(order_by = Value) %>%  ungroup()
# Create the ggplot with lines, highlight minimum values, and add labels
ggplot(LagCriteria_long, aes(x = lag, y = Value, color = Criteria, group = Criteria)) +  geom_line() +
geom_point(data = min_values, aes(x = lag, y = Value), color = "red", size = 3, shape = 8) +
geom_text(data = min_values, aes(x = lag, y = Value, label = lag),
vjust = 1.5, color = "black", size = 3.5) +  # Adjusted vjust to place labels below
labs(title = "Lag Criteria Comparison with Minimum Values Highlighted", x = "Lag Configuration",  y = "Criteria Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
devtools::document()
devtools::check()
devtools::document()
devtools::check()
kardl_model<-kardl(imf_example_data,
CPI~ER+PPI+asym(ER)+deterministic(covid)+trend,
mode=c(1,2,3,0))
MyCoint<- banerjee(kardl_model)
cat(paste0("The error correction parameter is ",MyCoint$coef,", and the t statistics=",MyCoint$statistic," where k=",MyCoint$k,"."))
cat(paste0("\nWe found '",MyCoint$Cont, "' at ",MyCoint$siglvl,"."))
cat(paste0("The error correction parameter = ",MyCoint$coef,", k=",MyCoint$k," and the t statistics=",MyCoint$statistic,"."))
library(magrittr)
imf_example_data %>% kardl(CPI~ER+PPI+asym(ER)+deterministic(covid)+trend,mode=c(1,2,3,0)) %>% cusumq()
myCusum<- imf_example_data %>% kardl(CPI~ER+PPI+asym(ER)+deterministic(covid)+trend,mode=c(1,2,3,0)) %>% cusumq()
myCusum
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
roxygen2::roxygenise()
roxygen2::roxygenise()
??methods
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
# Identify variables within specific functions, such as 'asymS'
parsed<-parseFormula(y ~ x +det(s + d) + asymS(d + s),"asymS()")
parsed
# Parse formulas containing various collection types like () or []
formula_ <- y ~ x +det(s -gg- d) + asymS(d2 -rr+ s)-mm[y1+y2+y3]+asym[k1+k2+k3]+trend-huseyin
# Extract variables in the 'asymS' function
parseFormula(formula_,"asymS")
# Use multiple functions to extract variables. If a specified function, such as "uuu",
# is not found, nothing is returned for it
a<-parseFormula(formula_,c("mm","det","uuu"))
# To obtain variables not enclosed within any function, specify them directly
parseFormula(formula_,c("trend","huseyin"))
# By default, 'parseFormula()' is case-sensitive.
For case-insensitive matching, set 'ignore.case = TRUE}
roxygen2::roxygenise()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
roxygen2::roxygenise()
devtools::document()
devtools::check()
utils::methods()
?system.file
??getPackageName
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
ping <- system("ping -c 1 google.com", intern = TRUE)
print(ping)
Sys.time()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
devtools::document()
devtools::check()
roxygen2::roxygenise()
pkgdown::build_site()
devtools::document()
devtools::check()
library(kardl)
?kardl_set
?asymmetrytest
roxygen2::roxygenise()
roxygen2::roxygenise()
?asymmetrytest
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::check()
kardl_model<-kardl(imf_example_data,
CPI~ER+PPI+asym(ER)+deterministic(covid)+trend,
mode=c(1,2,3,0))
kardl_longrun(kardl_model)
makeStars<-function(value,starsList=list( "0.001"= "***", "0.01"= "**", "0.05" ="*", "0.1" =".")){
cr<-as.numeric(names( starsList))
names(starsList)<-cr ## for removing all names containing zeroes at the end of names
sortedLables<-starsList[as.character( sort(cr))]
label<-paste0("Signif. codes: ",paste(names(sortedLables), "=", sortedLables, collapse = ", "))
myStar<-c()
for (s in 1:length(value)) {
nVal <- value[s]
crTrue <- cr[which(nVal <= cr)]
if (length(crTrue) < 1) {
myStar <- c(myStar,"")
} else{
myStar <- c(myStar,starsList[as.character(min(crTrue))][[1]])
}
}
list(
star=myStar,
desc=label
)
}
my_delta<-function(object,vars ) {
vcov_matrix <- stats::vcov(object)
estmean <- stats::coef(object)
coefsNo<-c(1, 3:(length(vars$longRunVars) + 1))
coefs<-estmean[coefsNo]
A<- 1/estmean[2]
lr_se <- sapply(coefsNo, function(i) {
B<- -estmean[i]/(estmean[2]^2)
(A^2) *vcov_matrix[i,i]+2*A*B*vcov_matrix[i,2]+(B^2 )* vcov_matrix[2,2]
})
as.vector( sqrt(lr_se))
}
delta_method <- function(object,vars, vcov_matrix = NULL) {
if (is.null(vcov_matrix)) vcov_matrix <- stats::vcov(object)
estmean <- stats::coef(object)
estvar <- vcov_matrix
restrictions <- paste0("~ -x", c(1, 3:(length(vars$longRunVars) + 1)), " / x2")
lr_se <- sapply(1:length(restrictions), function(i) {
msm::deltamethod(stats::formula(restrictions[i]), estmean, estvar)
})
return(lr_se)
}
model<-kardl_model
if(inherits(model,"kardl")){
vars<- model$inputs
ardl<-model$finalModel$model
}else{
stop("Not suitable input.")
}
objcoef <- ardl$coefficients
multipliers_coef <- c(
-objcoef[1] / objcoef[2],
-objcoef[(3):(length(vars$longRunVars) + 1)] / objcoef[2]
)
# vcov_matrix <- stats::vcov(ardl)
# multipliers_coef_se <- delta_method(ardl, vars,vcov_matrix = vcov_matrix)
multipliers_coef_se<-my_delta(ardl, vars)
multipliers <- data.frame(estimate = multipliers_coef, std.error = multipliers_coef_se, t.statistic = multipliers_coef/multipliers_coef_se,
"p.val"  = 2 * stats::pt(-abs(multipliers_coef/multipliers_coef_se), df = stats::df.residual(ardl)))
Mystars<-makeStars(multipliers[,4] )
multipliers<-cbind(multipliers,Mystars$star)
# multipliers <- data.frame(term = rownames(multipliers), multipliers)
colnames(multipliers)<-c("Estimate", "Std. Error", "t value", "Pr(>|t|)",""   )
# rownames(multipliers) <- 1:nrow(multipliers)
normOutput<-list(
type="kardl_longrund",
coef=multipliers_coef,
delta_se=multipliers_coef_se,
results=multipliers,
starsDesc=Mystars$desc
)
class(normOutput)<-"kardl"
normOutput
normOutput
View(normOutput)
normOutput[["results"]]
normOutput[["coef"]]
normOutput[["delta_se"]]
roxygen2::roxygenise()
devtools::document()
devtools::check()
kardl_model<-kardl(imf_example_data,
CPI~ER+PPI+asym(ER+PPI)+deterministic(covid)+trend,
mode=c(1,2,3,0,1))
ast<- asymmetrytest(kardl_model)
ast
ast$Lhypotheses
summary(ast)
a<-recmt(kardl_model)
a<-recmt(imf_example_data,
CPI~ER+PPI+asym(ER+PPI)+deterministic(covid)+trend,
mode=c(1,2,3,0,1))
a
summary(a)
a$FH0
cusum(kardl_model, plot=TRUE)
cusum(kardl_model)
a<-cusum(kardl_model)
a
print(a)
plot(a)
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
devtools::document()
devtools::check()
roxygen2::roxygenize()
roxygen2::roxygenize()
pkgdown::build_site()
