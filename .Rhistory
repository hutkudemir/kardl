m$inputs$differentAsymLag
m<-kardl(maxlag = 3,differentAsymLag = TRUE)
m
m<-kardl( maxlag = 3,differentAsymLag = FALSE)
m
m<-kardl(maxlag = 2,differentAsymLag = TRUE)
m
kardl(maxlag = 4,differentAsymLag = TRUE)
kardl(maxlag = 5,differentAsymLag = TRUE)
kardl(mode="quick", maxlag = 5,differentAsymLag = TRUE)
kardl(mode="quick", maxlag = 5,differentAsymLag = FALSE)
m<-kardl(mode="quick", maxlag = 5,differentAsymLag = FALSE)
m
m$properLag
m<-kardl(mode="grid_custom", maxlag = 5,differentAsymLag = FALSE)
m$properLag
m<-kardl(mode="grid_custom", maxlag = 5,differentAsymLag = TRUE)
m$properLag
m<-kardl(mode="grid_custom", maxlag = 3,differentAsymLag = FALSE)
m$properLag
kardl_set(maxlag = 5) # setting the maximum lag to 4 (default value is 4)
kardl_set(model=CPI~ER+asym(ER)+deterministic(covid)+trend)
kardl_set(data=imf_example_data)
kardl_set(mode=c(1,1,1))
kardl(mode="grid_custom",maxlag = 3)
m<- kardl(mode="grid_custom",maxlag = 3)
m$inputs$mode
m<-kardl()
m$inputs$mode
m<-kardl()
m$inputs$maxlag
m<- kardl(mode="grid_custom",maxlag = 3)
m$inputs$maxlag
m<-kardl()
m$inputs$maxlag
View(m)
kardl_set(maxlag = 5) # setting the maximum lag to 4 (default value is 4)
m<-kardl()
m$inputs$maxlag
kardl_get()
kardl_get()$maxlag
m<-kardl()
m$inputs$maxlag
m<- kardl(mode="grid_custom",maxlag = 3)
m$inputs$maxlag
kardl_reset()
kardl_set(maxlag = 5) # setting the maximum lag to 4 (default value is 4)
kardl_set(model=CPI~ER+asym(ER)+deterministic(covid)+trend)
kardl_set(data=imf_example_data)
# kardl_set(mode=c(1,1,1))
m<- kardl(mode="grid_custom",maxlag = 3)
m<-kardl()
m$inputs$maxlag
kardl_get()$maxlag
# kardl_set(mode=c(1,1,1))
m<- kardl(mode="grid_custom",maxlag = 3)
m<-kardl()
m$inputs$maxlag
# kardl_set(mode=c(1,1,1))
m<- kardl(mode="grid_custom",maxlag = 3)
m$inputs$maxlag
kardl_set(criterion="BIC")
# kardl_set(mode=c(1,1,1))
m<- kardl(mode="grid_custom",maxlag = 3)
# kardl_set(mode=c(1,1,1))
m<- kardl(mode="grid_custom",maxlag = 3)
m$inputs$criterion
# kardl_set(mode=c(1,1,1))
m<- kardl(maxlag = 3)
m$inputs$criterion
# kardl_set(mode=c(1,1,1))
m<- kardl(criterion = "AICc")
m$inputs$criterion
# kardl_set(mode=c(1,1,1))
m<- kardl(criterion = AIC)
m$inputs$criterion
kardl_set(model=CPI~ER+PPI+asym(ER)+deterministic(covid)+trend ,
data=imf_example_data, maxlag=2
) # setting the default values of the kardl function
# Sample article: THE DYNAMICS OF EXCHANGE RATE PASS-THROUGH TO DOMESTIC PRICES IN TURKEY
library(magrittr)
kardl_set(model=CPI~ER+PPI+asym(ER)+deterministic(covid)+trend ,
data=imf_example_data, maxlag=2
) # setting the default values of the kardl function
kardl_model_grid<-kardl(mode = "grid")
kardl_model_grid
kardl_model<- imf_example_data %>% kardl(mode = "grid_custom")
kardl_model
kardl_model2<-kardl(mode = c( 2    ,  1    ,  1   ,   3 ))
# Getting the results
kardl_model2
# Getting the summary of the results
summary(kardl_model)
# OR
imf_example_data %>% kardl() %>% summary()
# OR
imf_example_data %>% kardl(model=CPI~PPI+asym(ER)) %>% summary()
kardl(model=CPI~.+deterministic(covid),mode = "grid")
# Setting max lag instead of default value [4]
kardl(imf_example_data,MyFormula,maxlag = 3, mode = "grid_custom")
# Setting max lag instead of default value [4]
kardl(imf_example_data,
CPI~ER+PPI+asymL(ER),
maxlag = 3, mode = "grid_custom")
kardl_set(criterion = "HQ") # setting the criterion to HQ
kardl( mode = "grid_custom")
# using default values of lags
kardl( mode=c(1,2,3,0))
kardl_set(DifferentAsymLag = FALSE) # setting the same lags for positive and negative decompositions
diffAsymLags<-kardl(imf_example_data, MyFormula, mode = "grid_custom")
kardl_set(DifferentAsymLag = FALSE) # setting the same lags for positive and negative decompositions
diffAsymLags<-kardl(mode = "grid_custom")
kardl_set(differentAsymLag = FALSE) # setting the same lags for positive and negative decompositions
diffAsymLags<-kardl(mode = "grid_custom")
diffAsymLags$properLag
diffAsymLags<-kardl(maxlag=3, mode = "grid_custom")
diffAsymLags$properLag
diffAsymLags<-kardl(maxlag=4, mode = "grid_custom")
diffAsymLags$properLag
diffAsymLags<-kardl(maxlag=3, mode = "grid_custom")
diffAsymLags$properLag
diffAsymLags<-kardl(model=CPI~.,maxlag=3, mode = "grid_custom")
diffAsymLags$properLag
diffAsymLags<-kardl(model=asym(ER),maxlag=3, mode = "grid_custom")
diffAsymLags<-kardl(model=CPI~asym(ER),maxlag=3, mode = "grid_custom")
diffAsymLags$properLag
diffAsymLags$inputs$differentAsymLag
# setting the different lags for positive and negative decompositions
kardl_set(DifferentAsymLag = TRUE)
diffAsymLags<-kardl(model=CPI~asym(ER),maxlag=3, mode = "grid_custom")
diffAsymLags$properLag
kardl_set(differentAsymLag = FALSE) # setting the same lags for positive and negative decompositions
diffAsymLags<-kardl(model=CPI~asym(ER),maxlag=3, mode = "grid_custom")
diffAsymLags$properLag
diffAsymLags$inputs$differentAsymLag
# setting the different lags for positive and negative decompositions
kardl_set(DifferentAsymLag = TRUE)
diffAsymLags<-kardl(model=CPI~asym(ER),maxlag=3, mode = "grid_custom")
sameAsymLags$properLag
sameAsymLags<-kardl(model=CPI~asym(ER),maxlag=3, mode = "grid_custom")
sameAsymLags$properLag
sameAsymLags<-kardl(model=CPI~asym(ER),maxlag=2, mode = "grid_custom")
sameAsymLags$properLag
# setting the different lags for positive and negative decompositions
kardl_set(differentAsymLag = TRUE)
sameAsymLags<-kardl(model=CPI~asym(ER),maxlag=2, mode = "grid_custom")
sameAsymLags$properLag
diffAsymLags<-kardl(model=CPI~asym(ER),maxlag=2, mode = "grid_custom")
diffAsymLags$properLag
kardl_set(differentAsymLag = FALSE) # setting the same lags for positive and negative decompositions
diffAsymLags<-kardl(model=CPI~asym(ER),maxlag=2, mode = "grid_custom")
diffAsymLags$inputs$differentAsymLag
diffAsymLags$properLag
# setting the different lags for positive and negative decompositions
kardl_set(differentAsymLag = TRUE)
sameAsymLags<-kardl(model=CPI~asym(ER),maxlag=2, mode = "grid_custom")
sameAsymLags$properLag
# Setting the preffixes and suffixes for non-linear variables
kardl_set(AsymPrefix = c("asyP_","asyN_"), AsymSuffix = c("_PP","_NN"))
kardl(imf_example_data, MyFormula,  mode = "grid_custom")
kardl()
# For having the lags plot
library(ggplot2)
library(dplyr)
#  kardl_model_grid[["LagCriteria"]] is a matrix, convert it to a data frame
LagCriteria <- as.data.frame(kardl_model_grid[["LagCriteria"]])
# Rename columns for easier access and convert relevant columns to numeric
colnames(LagCriteria) <- c("lag", "AIC", "BIC", "AICc", "HQ")
LagCriteria <- LagCriteria %>%  mutate(across(c(AIC, BIC, HQ), as.numeric))
# Pivot the data to a long format excluding AICc
library(tidyr)
LagCriteria_long <- LagCriteria %>%
select(-AICc) %>%   pivot_longer(cols = c(AIC, BIC, HQ), names_to = "Criteria", values_to = "Value")
# Find the minimum value for each criterion
min_values <- LagCriteria_long %>%  group_by(Criteria) %>%
slice_min(order_by = Value) %>%  ungroup()
# Create the ggplot with lines, highlight minimum values, and add labels
ggplot(LagCriteria_long, aes(x = lag, y = Value, color = Criteria, group = Criteria)) +
geom_line() +
geom_point(data = min_values, aes(x = lag, y = Value), color = "red", size = 3, shape = 8) +
geom_text(data = min_values, aes(x = lag, y = Value, label = lag),
vjust = 1.5, color = "black", size = 3.5) +
labs(title = "Lag Criteria Comparison ", x = "Lag Configuration",  y = "Criteria Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
kardl_model_grid<-kardl(maxlag = 4 ,mode = "grid")
kardl_model_grid
kardl_model_grid<-kardl(maxlag = 2 ,mode = "grid")
# Sample article: THE DYNAMICS OF EXCHANGE RATE PASS-THROUGH TO DOMESTIC PRICES IN TURKEY
library(magrittr)
kardl_set(model=CPI~ER+PPI+asym(ER)+deterministic(covid)+trend ,
data=imf_example_data,
maxlag=2
) # setting the default values of the kardl function
kardl_model_grid<-kardl( mode = "grid")
kardl_model_grid
kardl_model<- imf_example_data %>% kardl(mode = "grid_custom")
kardl_model
kardl_model2<-kardl(mode = c( 2    ,  1    ,  1   ,   3 ))
# Getting the results
kardl_model2
# Getting the summary of the results
summary(kardl_model)
# OR
imf_example_data %>% kardl(model=CPI~PPI+asym(ER)) %>% summary()
kardl(model=CPI~.+deterministic(covid),mode = "grid")
# Setting max lag instead of default value [4]
kardl(imf_example_data,
CPI~ER+PPI+asymL(ER),
maxlag = 3, mode = "grid_custom")
kardl_set(criterion = "HQ") # setting the criterion to HQ
kardl( mode = "grid_custom")
# using default values of lags
kardl( mode=c(1,2,3,0))
kardl_set(differentAsymLag = FALSE) # setting the same lags for positive and negative decompositions
diffAsymLags<-kardl(model=CPI~asym(ER),maxlag=2, mode = "grid_custom")
diffAsymLags$properLag
# setting the different lags for positive and negative decompositions
kardl_set(differentAsymLag = TRUE)
sameAsymLags<-kardl(model=CPI~asym(ER),maxlag=2, mode = "grid_custom")
sameAsymLags$properLag
# Setting the preffixes and suffixes for non-linear variables
kardl_set(AsymPrefix = c("asyP_","asyN_"), AsymSuffix = c("_PP","_NN"))
kardl()
# For having the lags plot
library(ggplot2)
library(dplyr)
#  kardl_model_grid[["LagCriteria"]] is a matrix, convert it to a data frame
LagCriteria <- as.data.frame(kardl_model_grid[["LagCriteria"]])
# Rename columns for easier access and convert relevant columns to numeric
colnames(LagCriteria) <- c("lag", "AIC", "BIC", "AICc", "HQ")
LagCriteria <- LagCriteria %>%  mutate(across(c(AIC, BIC, HQ), as.numeric))
# Pivot the data to a long format excluding AICc
library(tidyr)
LagCriteria_long <- LagCriteria %>%
select(-AICc) %>%   pivot_longer(cols = c(AIC, BIC, HQ), names_to = "Criteria", values_to = "Value")
# Find the minimum value for each criterion
min_values <- LagCriteria_long %>%  group_by(Criteria) %>%
slice_min(order_by = Value) %>%  ungroup()
# Create the ggplot with lines, highlight minimum values, and add labels
ggplot(LagCriteria_long, aes(x = lag, y = Value, color = Criteria, group = Criteria)) +
geom_line() +
geom_point(data = min_values, aes(x = lag, y = Value), color = "red", size = 3, shape = 8) +
geom_text(data = min_values, aes(x = lag, y = Value, label = lag),
vjust = 1.5, color = "black", size = 3.5) +
labs(title = "Lag Criteria Comparison ", x = "Lag Configuration",  y = "Criteria Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(kardl)
# Sample article: THE DYNAMICS OF EXCHANGE RATE PASS-THROUGH TO DOMESTIC PRICES IN TURKEY
library(magrittr)
kardl_set(model=CPI~ER+PPI+asym(ER)+deterministic(covid)+trend ,
data=imf_example_data ,
maxlag=3)
recmt_model_grid<-recmt(mode = "grid")
devtools::test()
devtools::document()
devtools::check()
install.packages("pkgdown")
pkgdown::build_site()
roxygen2::roxygenize()
roxygen2::roxygenize()
pkgdown::build_site()
kardl_set(model=CPI~ER+PPI+asym(ER)+deterministic(covid)+trend ,
data=imf_example_data ,
maxlag=3)
recmt_model_grid<-recmt(mode = "grid")
recmt_model_grid
recmt_model<- imf_example_data %>% recmt(mode = "grid_custom")
# Sample article: THE DYNAMICS OF EXCHANGE RATE PASS-THROUGH TO DOMESTIC PRICES IN TURKEY
library(magrittr)
kardl_set(model=CPI~ER+PPI+asym(ER)+deterministic(covid)+trend ,
data=imf_example_data ,
maxlag=3)
kardl_get()
recmt_model_grid<-recmt(mode = "grid")
recmt_model_grid
recmt_model<- imf_example_data %>% recmt(mode = "grid_custom")
recmt_model
recmt_model2<-recmt(mode = c( 2    ,  1    ,  1   ,   3 ))
# Getting the results
recmt_model2
# Getting the summary of the results
summary(recmt_model2)
# OR
imf_example_data %>% recmt(CPI~PPI+asym(ER) +trend,case=4) %>% summary()
# For increasing the performance of finding the most fitted lag vector
recmt(mode = "grid_custom")
# Setting max lag instead of default value [4]
recmt(maxlag = 2, mode = "grid_custom")
# Using another criterion for finding the best lag
recmt(criterion = "HQ", mode = "grid_custom")
kardl_set(differentAsymLag = FALSE) # setting the same lags for positive and negative decompositions
diffAsymLags<-recmt( mode = "grid_custom")
diffAsymLags$OptLag
# setting the different lags for positive and negative decompositions
sameAsymLags<-recmt(differentAsymLag = TRUE , mode = "grid_custom" )
sameAsymLags$OptLag
kardl_get("differentAsymLag")
# Setting the preffixes and suffixes for non-linear variables
kardl_reset()
kardl_set(AsymPrefix = c("asyP_","asyN_"), AsymSuffix = c("_PP","_NN"))
customizedNames<-recmt(imf_example_data, MyFormula,  mode = "grid_custom")
kardl_set(AsymPrefix = c("asyP_","asyN_"), AsymSuffix = c("_PP","_NN"))
customizedNames<-recmt()
kardl_set(AsymPrefix = c("asyP_","asyN_"), AsymSuffix = c("_PP","_NN"))
# Setting the preffixes and suffixes for non-linear variables
kardl_reset()
kardl_set(AsymPrefix = c("asyP_","asyN_"), AsymSuffix = c("_PP","_NN"))
customizedNames<-recmt(imf_example_data, CPI~ER+PPI+asym(ER) )
customizedNames$ecmS$finalModel$model
# For having the lags plot
library(ggplot2)
library(dplyr)
kardl_reset()
#  recmt_model_grid[["LagCriteria"]] is a matrix, convert it to a data frame
LagCriteria <- as.data.frame(recmt_model_grid$ecmS$LagCriteria)
#  recmt_model_grid[["LagCriteria"]] is a matrix, convert it to a data frame
LagCriteria <- as.data.frame(recmt_model_grid$ecmS$LagCriteria)
# Rename columns for easier access and convert relevant columns to numeric
colnames(LagCriteria) <- c("lag", "AIC", "BIC", "AICc", "HQ")
LagCriteria <- LagCriteria %>%  mutate(across(c(AIC, BIC, HQ), as.numeric))
# Pivot the data to a long format excluding AICc
library(tidyr)
LagCriteria_long <- LagCriteria %>%  select(-AICc) %>%
pivot_longer(cols = c(AIC, BIC, HQ), names_to = "Criteria", values_to = "Value")
# Find the minimum value for each criterion
min_values <- LagCriteria_long %>%  group_by(Criteria) %>%
slice_min(order_by = Value) %>%  ungroup()
# Create the ggplot with lines, highlight minimum values, and add labels
ggplot(LagCriteria_long, aes(x = lag, y = Value, color = Criteria, group = Criteria)) +
geom_line() +
geom_point(data = min_values, aes(x = lag, y = Value), color = "red", size = 3, shape = 8) +
geom_text(data = min_values, aes(x = lag, y = Value, label = lag),
vjust = 1.5, color = "black", size = 3.5) +
labs(title = "Lag Criteria Comparison", x = "Lag Configuration",  y = "Criteria Value") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
source("~/.active-rstudio-document", echo = TRUE)
roxygen2::roxygenize()
pkgdown::build_site()
roxygen2::roxygenise()
devtools::document()
devtools::check()
roxygen2::roxygenise()
devtools::document()
devtools::check()
devtools::build_manual()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
?build_manual()
devtools::build_manual()
rlang::last_trace()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::document()
devtools::build_manual()
install.packages("tinytex")
devtools::build_manual()
tinytex::is_tinytex_installed()
devtools::check_man()
update.packages()
update.packages()
devtools::build_manual()
devtools::build_manual()
roxygen2::roxygenize()
devtools::build_manual()
devtools::build_manual()
tinytex::uninstall_tinytex(force = TRUE)
devtools::build_manual()
devtools::build_manual()
install.packages("tinytex")
uninstall_tinytex(force = FALSE, dir = tinytex_root())
library(tinytex)
uninstall_tinytex(force = FALSE, dir = tinytex_root())
reinstall_tinytex(packages = TRUE, dir = tinytex_root(), ...)
reinstall_tinytex(packages = TRUE, dir = tinytex_root())
reinstall_tinytex(packages = TRUE, dir = tinytex_root())
?reinstall_tinytex
uninstall_tinytex(force = TRUE)
sudo rm -rf /usr/share/texlive/
install_tinytex(force = TRUE)
install_tinytex(dir = "~/TinyTeX")
tinytex::is_tinytex_installed()
install.packages("tinytex")  # Reinstall tinytex package if needed
library(tinytex)
install_tinytex(force = TRUE)
tinytex::is_tinytex_installed()
tinytex::tlmgr_version()
tinytex::tlmgr_install("inconsolata")
tinytex::tlmgr("info inconsolata")
devtools::build_manual()
tinytex::tlmgr_update()
devtools::document()
devtools::check_man()
devtools::use_testthat()
devtools::test()
library(testthat)
library(kardl)
test_check("kardl")
devtools::test()
devtools::use_vignette("intro")
devtools::build_vignettes()
devtools::check(cran = TRUE)
devtools::check()
devtools::check(cran = TRUE)
devtools::build_manual()
tools::texi2pdf()
tools::texi2pdf("test.tex")
devtools::build_manual()
devtools::build_vignettes()
?build_vignettes
devtools::build_vignettes()
tools::pkgVignettes(dir = ".")
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
devtools::build_vignettes()
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
devtools::build_vignettes()
install.packages("litedown")
devtools::build_vignettes()
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
install.packages("R.rsp")
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
vignette("vignetteEX")
vignette("vignetteEX")
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
tools::buildVignettes(dir = ".", tangle=TRUE)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
library(tinytex)
uninstall_tinytex(force = TRUE)
library(tinytex)
uninstall_tinytex(force = TRUE)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::build_vignettes()
pkgdown::build_site()
devtools::build_vignettes()
devtools::build_manual()
rlang::last_trace()
install.packages("pandoc")
tinytex::tlmgr_install(c("inconsolata", "texinfo"))
tinytex::tlmgr_install("inconsolata", "texinfo", usermode = TRUE)
devtools::build_manual()
rlang::last_trace()
roxygen2::roxygenise()
roxygen2::roxygenise()
?pssf
roxygen2::roxygenise()
?pssf
devtools::check(cran = TRUE)
roxygen2::roxygenise()
devtools::check(cran = TRUE)
devtools::build_vignettes()
devtools::check(cran = TRUE)
writemath(y~x+z+asym(v)+asymL(q+a),"~/Downloads/myWordEqueation.docx")
writemath(y~x+z+asym(v)+asymL(q+a),"~/Downloads/myWordEqueation2.docx")
writemath(y~x+z+asym(v)+asymL(q+a),"~/Downloads/myWordEqueation2.docx")
devtools::check(cran = TRUE)
pak::pkg_install("rhub")
install.packages("rhub")
library(rhub)
rhub::rhub_setup()
rhub::rhub_doctor()
rhub::rhub_platforms()
rhub::rhub_check()
library(rhub)
check_for_cran()
install.packages("rhub")
library(rhub)
check_for_cran()
install.packages("pillar")
roxygen2::roxygenise()
library(ARDL)
?kardl
MyLM <-lm(CPI~ER+PPI,imf_example_data)
cusum(MyLM)
cusumq(MyLM)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
MyLM <- lm(CPI ~ ER + PPI, imf_example_data)
res_cusum <- cusum(MyLM)
roxygen2::roxygenize()
install.packages("roxygen2")
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
system("git --version")
devtools::document()
system("git --version")
